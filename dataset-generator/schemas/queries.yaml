queries:
  - name: VehiclesInPolygonTimeWindow
    description: Find vehicle events inside a district polygon during a time window.
    parameters:
      - name: DistrictName
        type: text
      - name: StartTime
        type: timestamp
      - name: EndTime
        type: timestamp
    cratedb_sql: |
      SELECT e.*
      FROM vehicle_events e
      JOIN districts d
        ON geo_within(e.geo_point, d.geo_shape)
      WHERE d.name = '{{.DistrictName}}'
        AND e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}';
    mobilitydb_sql: |
      SELECT e.*
      FROM vehicle_events e
      JOIN districts d
        ON ST_Within(e.geom, d.geom)
      WHERE d.name = '{{.DistrictName}}'
        AND e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}';

  - name: EventsNearPOI
    description: Find vehicle events near a specific POI within a distance during a time window.
    parameters:
      - name: POIID
        type: uuid
      - name: Radius
        type: float
      - name: StartTime
        type: timestamp
      - name: EndTime
        type: timestamp
    cratedb_sql: |
      SELECT e.*
      FROM vehicle_events e
      JOIN pois p
        ON geo_distance(e.geo_point, p.geo_point) < {{.Radius}}
      WHERE p.poi_id = '{{.POIID}}'
        AND e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}';
    mobilitydb_sql: |
      SELECT e.*
      FROM vehicle_events e
      JOIN pois p
        ON ST_DWithin(e.geom, p.geom, {{.Radius}})
      WHERE p.poi_id = '{{.POIID}}'
        AND e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}';

  - name: CountEventsInPolygonPerHour
    description: Count number of events per hour inside a district polygon.
    parameters:
      - name: DistrictName
        type: text
    cratedb_sql: |
      SELECT
          date_bin('1 hour', e.timestamp, '2025-01-01') AS hour,
          COUNT(*) AS event_count
      FROM vehicle_events e
      JOIN districts d
        ON geo_within(e.geo_point, d.geo_shape)
      WHERE d.name = '{{.DistrictName}}'
      GROUP BY hour
      ORDER BY hour;
    mobilitydb_sql: |
      SELECT
          date_trunc('hour', e.timestamp) AS hour,
          COUNT(*) AS event_count
      FROM vehicle_events e
      JOIN districts d
        ON ST_Within(e.geom, d.geom)
      WHERE d.name = '{{.DistrictName}}'
      GROUP BY hour
      ORDER BY hour;

  - name: VehiclesNearPOI
    description: Find distinct vehicles near a POI within a given distance.
    parameters:
      - name: POIID
        type: uuid
      - name: Radius
        type: float
    cratedb_sql: |
      SELECT DISTINCT e.trip_id
      FROM vehicle_events e
      JOIN pois p
        ON geo_distance(e.geo_point, p.geo_point) < {{.Radius}}
      WHERE p.poi_id = '{{.POIID}}';
    mobilitydb_sql: |
      SELECT DISTINCT e.trip_id
      FROM vehicle_events e
      JOIN pois p
        ON ST_DWithin(e.geom, p.geom, {{.Radius}})
      WHERE p.poi_id = '{{.POIID}}';

  - name: SpatiotemporalJoinPOI
    description: Join vehicle events with POIs that are spatially near each other.
    parameters:
      - name: Radius
        type: float
    cratedb_sql: |
      SELECT e.*, p.*
      FROM vehicle_events e
      JOIN pois p
        ON geo_distance(e.geo_point, p.geo_point) < {{.Radius}};
    mobilitydb_sql: |
      SELECT e.*, p.*
      FROM vehicle_events e
      JOIN pois p
        ON ST_DWithin(e.geom, p.geom, {{.Radius}});

  - name: VehiclesAtTimeInPolygon
    description: Find vehicles located inside a district polygon at a specific timestamp.
    parameters:
      - name: DistrictName
        type: text
      - name: Timestamp
        type: timestamp
    cratedb_sql: |
      SELECT DISTINCT e.trip_id
      FROM vehicle_events e
      JOIN districts d
        ON geo_within(e.geo_point, d.geo_shape)
      WHERE d.name = '{{.DistrictName}}'
        AND e.timestamp = '{{.Timestamp}}';
    mobilitydb_sql: |
      SELECT DISTINCT e.trip_id
      FROM vehicle_events e
      JOIN districts d
        ON ST_Within(e.geom, d.geom)
      WHERE d.name = '{{.DistrictName}}'
        AND e.timestamp = '{{.Timestamp}}';

  - name: NearestVehicleToPOIAtTime
    description: Find the vehicle closest to a POI at a specific time.
    parameters:
      - name: POIID
        type: uuid
      - name: Timestamp
        type: timestamp
    cratedb_sql: |
      SELECT e.trip_id,
             geo_distance(e.geo_point, p.geo_point) AS dist
      FROM vehicle_events e
      JOIN pois p
        ON p.poi_id = '{{.POIID}}'
      WHERE e.timestamp = '{{.Timestamp}}'
      ORDER BY dist
      LIMIT 1;
    mobilitydb_sql: |
      SELECT e.trip_id,
             ST_Distance(e.geom, p.geom) AS dist
      FROM vehicle_events e
      JOIN pois p
        ON p.poi_id = '{{.POIID}}'
      WHERE e.timestamp = '{{.Timestamp}}'
      ORDER BY dist
      LIMIT 1;

  - name: TrajectoryInPolygonTimeWindow
    description: Aggregate events into trajectories per trip and return those whose path is entirely inside a district polygon during a time window.
    parameters:
      - name: DistrictName
        type: text
      - name: StartTime
        type: timestamp
      - name: EndTime
        type: timestamp
    cratedb_sql: |
      SELECT trips.trip_id, trips.trip_path
      FROM (
          SELECT
              e.trip_id,
              geo_line(ARRAY_AGG(e.geo_point ORDER BY e.timestamp)) AS trip_path
          FROM vehicle_events e
          WHERE e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}'
          GROUP BY e.trip_id
      ) trips
      JOIN districts d
        ON geo_within(trips.trip_path, d.geo_shape)
      WHERE d.name = '{{.DistrictName}}';
    mobilitydb_sql: |
      SELECT trips.trip_id, trips.trip
      FROM (
          SELECT
              e.trip_id,
              tgeompoint_seq(
                  array_agg(
                      ST_AsText(e.geom) || '@' || e.timestamp
                      ORDER BY e.timestamp
                  )
              ) AS trip
          FROM vehicle_events e
          WHERE e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}'
          GROUP BY e.trip_id
      ) trips
      JOIN districts d
        ON ST_Within(
            trajectory(trips.trip),
            d.geom
        )
      WHERE d.name = '{{.DistrictName}}';
