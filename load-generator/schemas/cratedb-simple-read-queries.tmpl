-- Trip events
{{define "GetTripEvents"}}
SELECT geo_point, timestamp AS instant
FROM escooter_events
WHERE trip_id = '{{.TripID}}'
ORDER BY timestamp;
{{end}}

-- Start and end timestamp of a trip
{{define "TripFirstAndLastEvent"}}
SELECT 
    MIN(timestamp) AS start_time, 
    MAX(timestamp) AS end_time
FROM escooter_events
WHERE trip_id = '{{.TripID}}';
{{end}}

-- Length of a trip
{{define "LengthOfTrip"}}
WITH trip_segments AS (
    SELECT 
        geo_point,
        LEAD(geo_point) OVER (ORDER BY timestamp) AS next_point
    FROM escooter_events
    WHERE trip_id = '{{.TripID}}'
)
SELECT 
    COALESCE(SUM(distance(geo_point, next_point)), 0) AS tripLengthInMeters
FROM trip_segments
WHERE next_point IS NOT NULL;
{{end}}

-- Average speed of trip in Km/h
{{define "AverageSpeedOfTrip"}}
WITH trip_points AS (
  SELECT timestamp, geo_point,
         LEAD(geo_point) OVER (ORDER BY timestamp) AS next_geo,
         LEAD(timestamp) OVER (ORDER BY timestamp) AS next_timestamp
  FROM escooter_events
  WHERE trip_id = '{{.TripID}}'
),
speed_segments AS (
  SELECT 
    distance(geo_point, next_geo) AS segment_distance,
    EXTRACT(EPOCH FROM (next_timestamp - timestamp)) AS segment_time
  FROM trip_points
  WHERE next_geo IS NOT NULL AND next_timestamp IS NOT NULL
)
SELECT 
  CASE 
    WHEN SUM(segment_time) > 0 
    THEN (SUM(segment_distance) / SUM(segment_time)) * 3.6 
    ELSE 0 
  END AS avgSpeedInKmh
FROM speed_segments;
{{end}}

-- POIs within radius of the trip trajectory
{{define "PoisWithinRadiusDuringTrip"}}
SELECT DISTINCT p.*
FROM escooter_events e
JOIN pois p
  ON distance(e.geo_point, p.geo_point) <= {{.Radius}}
WHERE e.trip_id = '{{.TripID}}';
{{end}}

-- Trip's start locality
{{define "TripStartingLocality"}}
WITH trip_start AS (
    SELECT geo_point AS start_point
    FROM escooter_events
    WHERE trip_id = '{{.TripID}}'
    ORDER BY timestamp ASC
    LIMIT 1
)
SELECT '{{.TripID}}' AS trip_id, l.name AS start_locality
FROM trip_start ts
JOIN localities l ON within(ts.start_point, l.geo_shape);
{{end}}

-- Trip's end locality
{{define "TripEndLocality"}}
WITH trip_end AS (
    SELECT geo_point AS end_point
    FROM escooter_events
    WHERE trip_id = '{{.TripID}}'
    ORDER BY timestamp DESC
    LIMIT 1
)
SELECT '{{.TripID}}' AS trip_id, l.name AS end_locality
FROM trip_end te
JOIN localities l ON within(te.end_point, l.geo_shape);
{{end}}

-- POIs close to the end of a trip
{{define "PoisCloseToEndDestination"}}
SELECT p.poi_id, p.name, distance(p.geo_point, e.geo_point) AS distance
FROM (
  SELECT geo_point
  FROM escooter_events
  WHERE trip_id = '{{.TripID}}'
  ORDER BY timestamp DESC
  LIMIT 1
) e
CROSS JOIN pois p
ORDER BY distance ASC
LIMIT {{.Limit}};
{{end}}

