-- Data summaries (equivalent to DataSummaries)
{{define "DataSummaries"}}
SELECT 
  MIN(trip_length_m) AS minLength,
  MAX(trip_length_m) AS maxLength,
  AVG(trip_length_m) AS avgLength,
  MIN(trip_duration_s) AS minDuration,
  MAX(trip_duration_s) AS maxDuration,
  AVG(trip_duration_s) AS avgDuration,
  MIN(point_count) AS minPoints,
  MAX(point_count) AS maxPoints,
  AVG(point_count) AS avgPoints
FROM trip_summaries
WHERE start_time BETWEEN '{{.StartTime}}' AND '{{.EndTime}}';
{{end}}

-- Trips in locality (equivalent to TripsInLocality)
{{define "TripsInLocality"}}
SELECT DISTINCT e.trip_id
FROM escooter_events e
JOIN localities l
  ON within(e.geo_point, l.geo_shape)
WHERE l.locality_id = '{{.LocalityId}}'
  AND e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}';
{{end}}

-- N closest trips to POI (equivalent to NClosestTripsToPoi)
{{define "NClosestTripsToPoi"}}
SELECT 
  e.trip_id, 
  MIN(distance(e.geo_point, p.geo_point)) AS distance
FROM escooter_events e
JOIN pois p ON p.poi_id = '{{.POIID}}'
WHERE e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}'
GROUP BY e.trip_id
ORDER BY distance ASC
LIMIT {{.Limit}};
{{end}}

-- Trips starting and ending in different localities (equivalent to StartEndInDifferentLocalities)
{{define "StartEndInDifferentLocalities"}}
SELECT COUNT(*)
FROM trip_summaries ts
JOIN localities s ON within(ts.start_point, s.geo_shape)
JOIN localities e ON within(ts.end_point, e.geo_shape)
WHERE s.locality_id <> e.locality_id
  AND ts.start_time BETWEEN '{{.StartTime}}' AND '{{.EndTime}}';
{{end}}

{{define "EventDensityHeatmapPerLocality"}}
SELECT l.name AS locality,
       date_trunc('hour', e.timestamp) AS hour,
       COUNT(*) AS event_count
FROM escooter_events e
JOIN localities l ON within(e.geo_point, l.geo_shape)
WHERE e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}'
GROUP BY l.name, hour
ORDER BY l.name, hour;
{{end}}

{{define "TripDurationsPerLocality"}}
SELECT l.name AS locality,
       AVG(ts.trip_duration_s) AS avg_duration_secs
FROM trip_summaries ts
JOIN escooter_events e ON e.trip_id = ts.trip_id
JOIN localities l ON within(e.geo_point, l.geo_shape)
WHERE ts.start_time BETWEEN '{{.StartTime}}' AND '{{.EndTime}}'
  AND ts.trip_duration_s > 60
  AND e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}'
GROUP BY l.name
ORDER BY avg_duration_secs DESC
{{end}}

{{define "MostVisitedPOIs"}}
SELECT p.poi_id, p.name, COUNT(*) AS visits
FROM escooter_events e
JOIN pois p ON distance(e.geo_point, p.geo_point) < {{.Radius}}
WHERE e.timestamp BETWEEN '{{.StartTime}}' AND '{{.EndTime}}'
GROUP BY p.poi_id, p.name
ORDER BY visits DESC
LIMIT {{.Limit}};
{{end}}
