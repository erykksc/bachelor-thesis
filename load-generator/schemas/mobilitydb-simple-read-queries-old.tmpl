{{define "TripLength"}}
SELECT ST_Length(trajectory(tgeo_point)) AS trip_length_m
FROM escooter_events
WHERE trip_id = '{{.TripID}}'
LIMIT 1;
{{end}}

{{define "EscooterTraceByTripID"}}
SELECT *
FROM escooter_events
WHERE trip_id = '{{.TripID}}'
ORDER BY timestamp;
{{end}}

{{define "LastKnownLocationPerTrip"}}
SELECT DISTINCT trip_id, 
       tgeo_point AS last_location
FROM escooter_events
LIMIT {{.Limit}};
{{end}}

{{define "EscootersInDistricsInTimeRange"}}
SELECT e.*
FROM escooter_events e
JOIN localities d
  ON ST_Within(trajectory(e.tgeo_point)::geometry, d.geo_shape)
WHERE d.name = '{{.LocalityName}}'
  AND e.tgeo_point && tstzspan '[{{.StartTime}}, {{.EndTime}}]';
{{end}}

{{define "EscooterEventsNearPoiInTimeRange"}}
SELECT e.*
FROM escooter_events e
JOIN pois p
  ON ST_DWithin(trajectory(e.tgeo_point)::geometry, p.geo_point, {{.Radius}})
WHERE p.poi_id = '{{.POIID}}'
  AND e.tgeo_point && tstzspan '[{{.StartTime}}, {{.EndTime}}]';
{{end}}

{{define "EscootersAtTimeInLocality"}}
SELECT DISTINCT e.trip_id
FROM escooter_events e
JOIN localities d
  ON ST_Within(getValue(atTime(e.tgeo_point, timestamptz '{{.Timestamp}}'))::geometry, d.geo_shape)
WHERE d.name = '{{.LocalityName}}'
  AND e.tgeo_point @ timestamptz '{{.Timestamp}}';
{{end}}

{{define "NearestEscooterToPOIAtTime"}}
SELECT e.trip_id,
       ST_Distance(getValue(atTime(e.tgeo_point, timestamptz '{{.Timestamp}}'))::geometry, p.geo_point) AS dist
FROM escooter_events e
JOIN pois p
  ON p.poi_id = '{{.POIID}}'
WHERE e.tgeo_point @ timestamptz '{{.Timestamp}}'
ORDER BY dist
LIMIT 1;
{{end}}


{{define "EscootersNearPOI"}}
SELECT DISTINCT e.trip_id
FROM escooter_events e
JOIN pois p
  ON ST_DWithin(trajectory(e.tgeo_point)::geometry, p.geo_point, {{.Radius}})
WHERE p.poi_id = '{{.POIID}}';
{{end}}

{{define "CountEventsInLocalityPerHour"}}
SELECT COUNT(*) AS event_count
FROM escooter_events e
JOIN localities d
  ON ST_Within(trajectory(e.tgeo_point)::geometry, d.geo_shape)
WHERE d.name = '{{.LocalityName}}';
{{end}}

{{define "EscootersWithPOIsInRadiusOfEachOther"}}
SELECT e.*, p.*
FROM escooter_events e
JOIN pois p
  ON ST_DWithin(trajectory(e.tgeo_point)::geometry, p.geo_point, {{.Radius}})
LIMIT {{.Limit}};
{{end}}
